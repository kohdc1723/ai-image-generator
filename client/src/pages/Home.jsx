// import { set } from 'mongoose';
import React, { useState, useEffect } from 'react';
import { Card, Loader, FormField } from "../components";

const RenderCards = (props) => {
	const data = props.data;
	const title = props.title;

	if (data?.length > 0) {
		return data.map((post) => <Card key={post._id} {...post} />);
	} else {
		return (<h2 className="mt-5 font-bold text-slate-900 text-lg">{title}</h2>);
	}
}

const Home = () => {
	const [loading, setLoading] = useState(false);
	const [allPosts, setAllPosts] = useState(null);
	const [searchText, setSearchText] = useState("");
	const [searchedResult, setSearchedResult] = useState(null);
	const [searchTimeout, setSearchTimeout] = useState(null);

	useEffect(() => {
		const fetchPosts = async () => {
			setLoading(true);

			try {
				const response = await fetch("https://ai-image-generator-ol3p.onrender.com/api/v1/post", {
					method: "GET",
					headers: {
						"Content-Type": "application/json",
					}
				});

				if (response.ok) {
					const result = await response.json();
					setAllPosts(result.data.reverse());
				}
			} catch (error) {
				alert(error);
			} finally {
				setLoading(false);
			}
		}

		fetchPosts();
	}, []);

	const handleSearch = (e) => {
		clearTimeout(searchTimeout);
		setSearchText(e.target.value);
		
		setSearchTimeout(
			setTimeout(() => {
				const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));

				setSearchedResult(searchResult);
			}, 500)
		);
	}

	return (
		<section className="mx-auto">
			<div>
				<h1 className="font-extrabold text-3xl">The Community Showcase</h1>
				<p className="mt-2 text-slate-500 text-base max-w-lg">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
			</div>
			<div className="max-w-3xl">
				<div className="mt-16">
					<FormField labelName="Search posts" type="text" name="text" placeholder="Search posts" value={searchText} handleChange={handleSearch} />
				</div>
				<div className="mt-10">
					{loading ? (
						<div className="flex flex-col justify-center items-center">
							<Loader />
							<div>Please be patient...</div>
							<div>It may take a few minutes to run the deployed server on the first time.</div>
							<div>Once the server runs, it will be much faster!</div>
						</div>
					) : (
						<div>
							{searchText && (
								<h2 className="font-medium text-slate-500 text-xl mb-3">
									Showing results for <span className="text-slate-700 font-bold">{searchText}</span>
								</h2>
							)}
							<div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
								{searchText ? (
									<RenderCards data={searchedResult} title="No search result" />
								) : (
									<RenderCards data={allPosts} title="No posts found" />
								)}
							</div>
						</div>
					)}
				</div>
			</div>
		</section>
	);
}

export default Home;